@name bootstrap_builder
@inputs 
@outputs 
@persist 
@trigger 


if (first()){
    
    #include "github/lib/strings"
    
    #using bsUseSections will limit the speed at which a bootstrap script can run
        #it is literally the same as using interval() except that it keeps track of what section should be run
        
        #section run is the section that will run this execution of the calling chip
        #section number is the current section that we are on
            #after a section is run we increase the SectionRun value 
        
        function number table:bsDefSection(S:string, HeaderW:number){
            This["section_number", number] = This["section_number", number] + 1
            if (This["section_run", number] == This["section_number", number]){
                This["lines", array]:pushString("")
                This["lines", array]:pushString("")
                
                if (S != ""){
                    local HashLength = (HeaderW/2) - (S:length()/2)
                    This["lines", array]:pushString("#":repeat(floor(HashLength)) + S + "#":repeat(ceil(HashLength)))
                }
                
                return 1
            }else{
                return 0
            }
        }
        function number table:bsDefSection(S:string){
            return This:bsDefSection(S, 100)
        }
        function number table:bsDefSection(){
            return This:bsDefSection("", 0)
        }
        
        function table:bsUseSections(N:number){
            interval(N)
            This["section_number", number] = 0
            This["section_run", number] = This["section_run", number] + 1
        }
        
        function table:bsUseSections(){
            This:bsUseSections(200) #this is 200ms because that is filewrite cooldown
        }
    #end bsDefSection Logic

    function table bsInitChip(){
        local Chip = table()
        
        Chip["lines", array] = array("", "")
        Chip["name", string] = ""
        Chip["inputs", array] = array()
        Chip["outputs", array] = array()
        Chip["persist", array] = array()
        Chip["includes", table] = table()
        
        return Chip
    }
    
    #the bootstrapping chip must include any files which are going to be included
    function table:bsAddInclude(S:string){
        This["includes", table][S, string] = ""
    }

    function table:bsSetName(N:string){
        This["name", string] = N
    }
    
    function table:bsAddInput(V:string, T:string){
        This["inputs", array]:pushString(V + ":" + T)
    }
    
    function table:bsAddOutput(V:string, T:string){
        This["outputs", array]:pushString(V + ":" + T)
    }
    
    function table:bsAddPersist(V:string, T:string){
        This["persist", array]:pushString(V + ":" + T)
    }
    
    function table:bsAddLine(S:string){
        This["lines", array]:pushString(S)
    }
    function table:bsAddLineFirst(S:string){
        This["lines", array]:pushString("if (first()){")
        This["lines", array]:pushString(tab() + S)
        This["lines", array]:pushString("}")
    }
    
    function table:bsAddLines(Ls:array){
        This["lines", array] = This["lines", array]:add(Ls)
    }
    function table:bsAddLinesFirst(Ls:array){   
        This["lines", array]:pushString("if (first()){")
        This["lines", array] = This["lines", array]:add(Ls:indent())
        This["lines", array]:pushString("}")
    }
    
    function table:bsAddComment(S:string){
        This["lines", array]:pushString("# " + S)
    }
    
    function table:bsAddBreak(){
        This["lines", array]:pushString("")
    }
    
    function table:bsAddBreak(N){
        for(I = 0, N){
            This["lines", array]:pushString("")
        }
    }
    
    function string table:bootstrap_build_code(){
        local Headers = array(
            "@name " + This["name", string],
            "@inputs " + This["inputs", array]:concat(" "),
            "@outputs " + This["outputs", array]:concat(" "),
            "@persist " + This["persist", array]:concat(" "),
            ""
        )
        
        Headers:pushString("if (first()){")
        foreach(I, Inc:string = This["includes", table]:keys()){
            Headers:pushString(tab() + "#include \"" + Inc + "\"")
        }
        Headers:pushString("}")
        
        return Headers:add(This["lines", array]):concat("\n")
    }
    
    function table:bootstrap_now(Chip:entity){
        Chip:remoteSetCode(This:bootstrap_build_code(), getCodeIncludes():intersect(This["includes", table]))
    }
    
    function table:bootstrap_to_file(FileName:string, FilePath:string){
        if (This["section_number", number] > 0){
            if (This["section_run", number] <= This["section_number", number]){
                return
            }
        }
        
        local FileString = FilePath + "/" + FileName
        fileWrite(FileString, This:bootstrap_build_code())
    }
    function table:bootstrap_to_file(FileName:string){
        This:bootstrap_to_file(FileName, ">e2shared/generated")
    }
    function table:bootstrap_to_file(){
        This:bootstrap_to_file(This["name", string] + ".txt")
    }
    
    function table:bootstrap(Chip:entity){
        This:bootstrap_now(Chip)
    }
    
    function table:bootstrap(){
        if (This["section_number", number] > 0){
            if (This["section_run", number] <= This["section_number", number]){
                return
            }
        }
        
        This:bootstrap(entity())
    }
}

