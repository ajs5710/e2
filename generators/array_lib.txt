@name 
@inputs 
@outputs 
@persist 
@trigger 

interval(100)

if (first()){
    #include "github/lib/bootstrap_builder"
    #include "github/lib/compares"
    #include "github/lib/blocks"
}

if (first()){
    function array sort_sBy_(ArrayType:string, ComparableType:string){
        local FunctionName = "sort" + ArrayType:capitalize() + "sBy" + ComparableType:capitalize()
        return array(
            "",
            "function table:" + FunctionName + "(Func:string, Desc:number){",
            tab() + "local Vars = This:blockValues()",
            tab() + "local Unsorted = Vars[\"unsorted\", array]",
            tab() + "local Sorted = Vars[\"sorted\", array]",
            tab() + "local LastI = Vars[\"i\", number]",
            tab() + "local LastJ = Vars[\"j\", number]",
            "",            
            tab() + "for(I = LastI, Unsorted:count()){",
            tab(2) + "local A = Unsorted[I, " + ArrayType + "]",
            tab(2) + "local AVal = Func(A)[" + ComparableType + "]",            
            tab(2) + "local Inserted = 0",
            tab(2) + "for(J = LastJ, Sorted:count()){",
            tab(3) + "if (This:blockPerfBreak()){",
            tab(4) + "Vars[\"i\", number] = I",
            tab(4) + "Vars[\"j\", number] = J",
            tab(4) + "return",
            tab(3) + "}else{",
            tab(4) + "LastI = 1",
            tab(4) + "LastJ = 1",
            tab(3) + "}",
            "",
            tab(3) + "local B = Sorted[J, " + ArrayType + "]",
            tab(3) + "local BVal = Func(B)[" + ComparableType + "]",
            tab(3) + "if (AVal:compare(BVal) < 0){",
            tab(4) + "Sorted:insert" + ArrayType:capitalize() + "(J, A)",
            tab(4) + "Inserted = 1",
            tab(4) + "break",
            tab(3) + "}",
            tab(2) + "}",
            tab(2) + "if (Inserted == 0){",
            tab(3) + "Sorted:push" + ArrayType:capitalize() + "(A)",
            tab(2) + "}",
            tab() + "}",
            tab() + "if (This:blockLast()){",
            tab(2) + "This[\"return\", array] = Sorted",
            tab() + "}",
            "}",
            "function table array:" + FunctionName + "(BlockName:string, Func:string, Desc:number){",
            tab() + "local Block = block(BlockName)",        
            tab() + "if (Block:blockNotDone()){",
            tab(2) + "if (Block:blockFirst()){",
            tab(3) + "local Vars = Block:blockValues()",
            tab(3) + "Vars[\"unsorted\", array] = This",
            tab(3) + "Vars[\"sorted\", array] = array()",
            tab(3) + "Vars[\"i\", number] = 1",
            tab(3) + "Vars[\"j\", number] = 1",
            tab(2) + "}",
            tab(2) + "Block:" + FunctionName + "(Func, Desc)",
            tab() + "}",
            tab() + "return Block",
            "}",
            "function table array:" + FunctionName + "(BlockName:string, Func:string){",
            tab() + "return This:" + FunctionName + "(BlockName, Func, 0)",
            "}"
        )
    }
    
    function array sample_(ArrayType:string){
        return array(
            "",
            "function table:sample" + ArrayType:capitalize() + "(){",
            tab() + "local Arr = This:blockValues()[\"arr\", array]",
            tab() + "This[\"return\", " + ArrayType + "] = Arr[ceil(random(Arr:count())), " + ArrayType + "]",
            "}",
            "function table array:sample" + ArrayType:capitalize() + "(BlockName:string){",
            tab() + "local Block = block(BlockName)",
            tab() + "if (Block:blockNotDone()){",
            tab(2) + "local Vars = Block:blockValues()",
            tab(2) + "Vars[\"arr\", array] = This",
            tab(2) + "Block:sample" + ArrayType:capitalize() + "()",
            tab(2) + "Block:blockDone(1)",
            tab() + "}",
            tab() + "return Block",
            "}"
        )
    }
    
    function array map_sTo_(ArrayType:string, MapType:string){
        local FunctionName = "map" + ArrayType:capitalize() + "sTo" + MapType:capitalize()
        return array(
            "",
            "function table:" + FunctionName + "(Func:string){",
            tab() + "local Vars = This:blockValues()",
            tab() + "local Arr = Vars[\"arr\", array]",
            tab() + "local Mapped = Vars[\"mapped\", array]",
            tab() + "local LastI = Vars[\"i\", number]",
            tab() + "for(I = LastI, Arr:count()){",
            tab(2) + "if (This:blockPerfBreak()){",
            tab(3) + "Vars[\"i\", number] = I",
            tab(3) + "return",
            tab(2) + "}",
            tab(2) + "Mapped:push" + MapType:capitalize() + "(Func(Arr[I, " + ArrayType + "])[" + MapType + "])",
            tab() + "}",
            tab() + "if (This:blockLast()){",
            tab(2) + "This[\"return\", array] = Mapped",
            tab() + "}",
            "}",
            "function table array:" + FunctionName + "(BlockName:string, Func:string){",
            tab() + "local Block = block(BlockName)",
            tab() + "if (Block:blockNotDone()){",
            tab(2) + "if (Block:blockFirst()){",
            tab(3) + "local Vars = Block:blockValues()",
            tab(3) + "Vars[\"arr\", array] = This",
            tab(3) + "Vars[\"mapped\", array] = array()",
            tab(3) + "Vars[\"i\", number] = 1",
            tab(2) + "}",
            tab(2) + "Block:" + FunctionName + "(Func)",
            tab() + "}",
            tab() + "return Block",
            "}"
        )
    }
    
    function array index_sBy_(ArrayType:string, IndexableType:string){
        local FunctionName = "index" + ArrayType:capitalize() + "sBy" + IndexableType:capitalize()
        return array(
            "",
            "function table:" + FunctionName + "(Func:string){",
            tab() + "local Vars = This:blockValues()",
            tab() + "local Arr = Vars[\"arr\", array]",
            tab() + "local Indexed = Vars[\"indexed\", table]",
            tab() + "local LastI = Vars[\"i\", number]",
            "",
            tab() + "for(I = LastI, Arr:count()){",
            tab(2) + "if (This:blockPerfBreak()){",
            tab(3) + "Vars[\"i\", number] = I",
            tab(3) + "return",
            tab(2) + "}",
            tab(2) + "local Indexable = Arr[I, " + ArrayType + "]",
            tab(2) + "local Index = Func(Indexable)[" + IndexableType + "]",
            tab(2) + "Indexed[Index, " + ArrayType + "] = Indexable",
            tab() + "}",
            tab() + "if (This:blockLast()){",
            tab(2) + "This[\"return\", table] = Indexed",
            tab() + "}",
            "}",
            "function table array:" + FunctionName + "(BlockName:string, Func:string){",
            tab() + "local Block = block(BlockName)",        
            tab() + "if (Block:blockNotDone()){",
            tab(2) + "if (Block:blockFirst()){",
            tab(3) + "local Vars = Block:blockValues()",
            tab(3) + "Vars[\"arr\", array] = This",
            tab(3) + "Vars[\"indexed\", table] = table()",
            tab(3) + "Vars[\"i\", number] = 1",
            tab(2) + "}",
            tab(2) + "Block:" + FunctionName + "(Func)",
            tab() + "}",
            tab() + "return Block",
            "}"
        )
    }
}

Chip = bsInitChip("array_lib")
if (Chip:blockPerfBreak()){
    exit()
}

if (first()){
    Chip:bsAddInclude("github/lib/compares")
    Chip:bsAddInclude("github/lib/blocks")
}

Section = Chip:bsDefSection("Example Usage")
if (Section:blockNotDone()){
    if (Section:blockPerfBreak()){
        exit()
    }
    
    Section:bsAddLine("#[")
    Section:bsAddLines(array(
        "### sortBy",
        "Result = players():sortEntitysByString(\"sort_players\", \"name\", 0)",
        "if (!Result:exists(\"return\")){",
        tab() + "exit()",
        "}",
        "Return = Result[\"return\", array]",
        ""
    ))
    Section:bsAddLines(array(
        "### sample",
        "Result = players():sampleEntity(\"sample_player\")",
        "if (!Result:exists(\"return\")){",
        tab() + "exit()",
        "}",
        "Return = Result[\"return\", entity]",
        ""
    ))
    Section:bsAddLines(array(
        "### map",
        "Result = players():mapEntitysToString(\"map_players\", \"name\")",
        "if (!Result:exists(\"return\")){",
        tab() + "exit()",
        "}",
        "Return = Result[\"return\", array]",
        ""
    ))
    Section:bsAddLines(array(
        "### indexBy",
        "Result = players():indexEntitysByString(\"players_by_name\", \"name\")",
        "if (!Result:exists(\"return\")){",
        tab() + "exit()",
        "}",
        "Return = Result[\"return\", table]",
        ""
    ))
    Section:bsAddLine("]#")
    
}

#sort_by
Section = Chip:bsDefSectionFirst("sort<types>by<type>")
if (Section:blockNotDone()){
    if (Section:blockPerfBreak()){
        exit()
    }
    
    LoopCompareTypes = Section:blockLoop(array("string", "number"))
    while (LoopCompareTypes:blockNotDone()){
        ComparableBlock = LoopCompareTypes:blockForLoopValue("string")
        if (ComparableBlock:blockNotDone()){
            if (ComparableBlock:blockPerfBreak()){
                exit()
            }
            
            ComparableType = ComparableBlock:blockValues()["value", string]
            
            LoopArrayTypes = ComparableBlock:blockLoop(array("number", "string", "vector", "entity", "angle"), ComparableType)
            while (LoopArrayTypes:blockNotDone()){
                ArrayTypeBlock = LoopArrayTypes:blockForLoopValue("string")
                if (ArrayTypeBlock:blockNotDone()){
                    if (ArrayTypeBlock:blockPerfBreak()){
                        exit()
                    }
                    
                    ArrayType = ArrayTypeBlock:blockValues()["value", string]
                    
                    Section:bsAddLines(sort_sBy_(ArrayType, ComparableType):indent())
                }
            }
        }
    }
}

#sample
Section = Chip:bsDefSectionFirst("sample<type>")
if (Section:blockNotDone()){
    if (Section:blockPerfBreak()){
        exit()
    }
    
    LoopArrayTypes = Section:blockLoop(array("number", "string", "vector", "entity", "angle"))
    while (LoopArrayTypes:blockNotDone()){
        ArrayTypeBlock = LoopArrayTypes:blockForLoopValue("string")
        if (ArrayTypeBlock:blockNotDone()){
            if (ArrayTypeBlock:blockPerfBreak()){
                exit()
            }
            
            ArrayType = ArrayTypeBlock:blockValues()["value", string]
            Section:bsAddLines(sample_(ArrayType):indent())
        }
    }
}

#map
Section = Chip:bsDefSectionFirst("map<types>By<type>")
if (Section:blockNotDone()){
    if (Section:blockPerfBreak()){
        exit()
    }
    
    MapTypesBlock = Section:blockLoop(array("number", "string", "vector", "entity", "angle"))
    while (MapTypesBlock:blockNotDone()){
        MapTypeBlock = MapTypesBlock:blockForLoopValue("string")
        if (MapTypeBlock:blockNotDone()){
            if (MapTypeBlock:blockPerfBreak()){
                exit()
            }
            
            MapType = MapTypeBlock:blockValues()["value", string]
            
            LoopArrayTypes = MapTypeBlock:blockLoop(array("number", "string", "vector", "entity", "angle"), MapType)
            while (LoopArrayTypes:blockNotDone()){
                ArrayTypeBlock = LoopArrayTypes:blockForLoopValue("string")
                if (ArrayTypeBlock:blockNotDone()){
                    if (ArrayTypeBlock:blockPerfBreak()){
                        exit()
                    }
                    
                    ArrayType = ArrayTypeBlock:blockValues()["value", string]
                    
                    Section:bsAddLines(map_sTo_(ArrayType, MapType):indent())
                }
            }
        }
    }
}

#index_by
Section = Chip:bsDefSectionFirst("index<types>by<type>")
if (Section:blockNotDone()){
    if (Section:blockPerfBreak()){
        exit()
    }
    
    IndexableTypesBlock = Section:blockLoop(array("number", "string"))
    while (IndexableTypesBlock:blockNotDone()){
        IndexableTypeBlock = IndexableTypesBlock:blockForLoopValue("string")
        if (IndexableTypeBlock:blockNotDone()){
            if (IndexableTypeBlock:blockPerfBreak()){
                exit()
            }
            
            IndexableType = IndexableTypeBlock:blockValues()["value", string]
            
            LoopArrayTypes = IndexableTypeBlock:blockLoop(array("number", "string", "vector", "entity", "angle"), IndexableType)
            while (LoopArrayTypes:blockNotDone()){
                ArrayTypeBlock = LoopArrayTypes:blockForLoopValue("string")
                if (ArrayTypeBlock:blockNotDone()){
                    if (ArrayTypeBlock:blockPerfBreak()){
                        exit()
                    }
                    ArrayType = ArrayTypeBlock:blockValues()["value", string]
                    
                    Section:bsAddLines(index_sBy_(ArrayType, IndexableType):indent())
                }
            }
        }
    }
}


Chip:bootstrap_to_file()
Chip:bootstrap()
