@name 
@inputs
@outputs 
@persist MovingObject:entity Length ProtectedRadius
@trigger 

if (first()){
    runOnTick(1)
    
    Color = vec(255,0,0)
    Length = 10
    ProtectedRadius = 50
        
    #base
    Base = 1
    holoCreate(Base)
    holoModel(Base, "hq_sphere")
    holoScaleUnits(Base, vec(5,5,5))
    holoColor(Base, Color)
        
    #wand thingy
    Wand = 2
    holoCreate(Wand)
    holoModel(Wand, "hq_cylinder")
    holoScaleUnits(Wand, vec(1, 1, Length))
    holoPos(Wand, entity():pos() + vec(0,0,1)*Length/2)
    holoParent(Wand, Base)
    holoColor(Wand, Color)
    
    ImpactPoint = 3
    holoCreate(ImpactPoint)
    holoModel(ImpactPoint, "hq_sphere")
    holoScaleUnits(ImpactPoint, vec(5,5,5))
    
    Protected = 4
    holoCreate(Protected)
    holoModel(Protected, "hq_sphere")
    holoScaleUnits(Protected, vec(-ProtectedRadius*2,-ProtectedRadius*2,-ProtectedRadius*2))
    
    MovingObject = propSpawn("models/props_junk/PopCan01a.mdl", entity():pos() + entity():up()*250, 1)
    rope(1, MovingObject, vec(0,0,0), entity(), vec(0,0,1))
    
}

Angle = MovingObject:vel():normalized():toAngle() + ang(90,0,0)
holoAng(1, Angle)
holoPos(1, MovingObject:pos())
holoPos(4, entity():pos())

MoveDistance = (MovingObject:pos() - entity():pos()):length()
HitPosition = MoveDistance*MovingObject:vel():normalized() + MovingObject:pos()

holoPos(3, HitPosition)

if ((HitPosition - entity():pos()):length() <= (ProtectedRadius + MovingObject:radius())){
    holoColor(4, vec(255, 0, 0))
}else{
    holoColor(4, vec(0, 255, 0))
}
