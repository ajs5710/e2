@name 
@inputs 
@outputs 
@persist HoloI Target TargetPos:vector
@trigger 

interval(500)

if (first()){
    #include "github/lib/perfed"
    
    runOnChat(1)
    
    HoloI = 0
    
    function number createHolo(HoloModel:string){
        HoloI += 1
        holoCreate(HoloI)
        holoModel(HoloI, HoloModel)
        
        return HoloI
    }
    
    function string getLetter(L:string, Lowercase:number){
        if (Lowercase){
            return "models/sprops/misc/alphanum/alphanum_l_" + L + ".mdl"
        }else{
            return "models/sprops/misc/alphanum/alphanum_" + L + ".mdl"
        }
    }
    function string getLetter(L:string){
        return getLetter(L, 0)
    }
    function string letterN(N){
        return toChar(96 + N)
    }
    
    function vector randColor(){
        return randvec(vec(80,80,80), vec(255, 255, 255))
    }
    
    function createBlock(Pos:vector, LetterA:string, LetterB:string, Number){
        LetterOffset = 5.1
        LetterScale = 0.6
        
        BaseHolo = createHolo("")
        holoAlpha(BaseHolo, 0)
        holoAng(BaseHolo, ang(0,0,0))
        
        Face1 = createHolo(getLetter(LetterA))
        holoPos(Face1, entity():pos() + vec(0,0,LetterOffset))
        holoAng(Face1, ang(0,0,90))
        holoScaleUnits(Face1, holoEntity(Face1):boxSize()*LetterScale)
        holoColor(Face1, randColor())
        holoParent(Face1, BaseHolo)
        
        Face2 = createHolo(getLetter(LetterA, 1))
        holoPos(Face2, entity():pos() - vec(0,0,LetterOffset))
        holoAng(Face2, ang(180,180,90))
        holoScaleUnits(Face2, holoEntity(Face2):boxSize()*LetterScale)
        holoColor(Face2, randColor())
        holoParent(Face2, BaseHolo)
        
        Face3 = createHolo(getLetter(LetterB))
        holoPos(Face3, entity():pos() + vec(0,LetterOffset,0))
        holoAng(Face3, ang(0,0,0))
        holoScaleUnits(Face3, holoEntity(Face3):boxSize()*LetterScale)
        holoColor(Face3, randColor())
        holoParent(Face3, BaseHolo)
        
        Face4 = createHolo(getLetter(LetterB, 1))
        holoPos(Face4, entity():pos() - vec(0,LetterOffset,0))
        holoAng(Face4, ang(180,180,0))
        holoScaleUnits(Face4, holoEntity(Face4):boxSize()*LetterScale)
        holoColor(Face4, randColor())
        holoParent(Face4, BaseHolo)
        
        Face5 = createHolo("models/sprops/misc/alphanum/alphanum_" + Number + ".mdl")
        holoPos(Face5, entity():pos() + vec(LetterOffset,0,0))
        holoAng(Face5, ang(90,-90,0))
        holoScaleUnits(Face5, holoEntity(Face5):boxSize()*LetterScale)
        holoColor(Face5, randColor())
        holoParent(Face5, BaseHolo)
        
        Face6 = createHolo("models/sprops/misc/alphanum/alphanum_star_3.mdl")
        holoPos(Face6, entity():pos() - vec(LetterOffset,0,0))
        holoAng(Face6, ang(-90,90,0))
        holoScaleUnits(Face6, holoEntity(Face6):boxSize()*LetterScale)
        holoColor(Face6, randColor())
        holoParent(Face6, BaseHolo)
        
        Prop = propSpawn("models/hunter/blocks/cube025x025x025.mdl", Pos, 0)
        Prop:setMaterial("phoenix_storms/fender_wood")
        Prop:setColor(vec(100,100,100))
        #Prop:setMaterial("sprops/textures/sprops_wood3")
        holoPos(BaseHolo, Prop:pos())
        holoAng(BaseHolo, Prop:angles())
        holoParent(BaseHolo, Prop)
    }
}

if (chatClk(owner())){
    LastSaid = owner():lastSaid()
    
    if (LastSaid[1] == "!"){
        LastSaidArr = LastSaid:sub(2):explode(" ")
        Command = LastSaidArr:shiftString()
        
        if (Command == "daycare"){
            Player = findPlayerByName(LastSaidArr:concat(" "))
            
            if (Player:isValid()){
                blockResetAll()
                Target = 1
                TargetPos = Player:pos()
            }
        }
    }
}

if (Target){
    Block = block("construct_floor")
    if (Block:blockNotDone()){
        Vars = Block:blockValues()
        
        if (Block:blockPerfBreak() | !propCanCreate()){
            Block:blockDone(0)
            exit()
        }
        
        Holo = createHolo("models/hunter/plates/plate7x7.mdl")
        holoPos(Holo, TargetPos - vec(0,0,1.5))
        holoAng(Holo, ang(0,0,0))
        holoMaterial(Holo, "models/debug/debugwhite")
        Prop = propSpawn("models/hunter/plates/plate7x7.mdl", TargetPos - vec(0,0,2), ang(0,0,0), 1)
        Prop:setAlpha(0)
    }
    
    Block = block("build_walls")
    if (Block:blockNotDone()){
        Vars = Block:blockValues()
        if (Block:blockFirst()){
            Vars["i", number] = 1
        }
        LastI = Vars["i", number]
        
        for(I = LastI, 4){
            if (Block:blockPerfBreak() | !propCanCreate()){
                Block:blockDone(0)
                exit()
            }
            
            Pos = TargetPos
            Ang = ang(0,0,0)
            if (I == 1){
                Pos += vec(0, 150, 50)
                Ang = ang(90, 0, 90)
            }elseif(I == 2){
                Pos += vec(0, -150, 50)
                Ang = ang(90, 0, 90)
            }elseif(I == 3){
                Pos += vec(150, 0, 50)
                Ang = ang(90, 90, 90)
            }elseif(I == 4){
                Pos += vec(-150, 0, 50)
                Ang = ang(90, 90, 90)
            }
            Prop = propSpawn("models/hunter/plates/plate2x7.mdl", Pos, Ang, 1)
            #Prop:setMaterial("models/props_c17/gate_door02a")
            Prop:setMaterial("models/props_interiors/metalfence007a")
        }
    }
    
    Block = block("construct_ceiling")
    if (Block:blockNotDone()){
        Vars = Block:blockValues()
        
        if (Block:blockPerfBreak() | !propCanCreate()){
            Block:blockDone(0)
            exit()
        }
        
        Holo = createHolo("models/hunter/plates/plate7x7.mdl")
        holoPos(Holo, TargetPos + vec(0,0,100))
        holoAng(Holo, ang(0,0,0))
        holoMaterial(Holo, "models/debug/debugwhite")
        Prop = propSpawn("models/hunter/plates/plate7x7.mdl", TargetPos + vec(0,0,100), ang(0,0,0), 1)
        Prop:setAlpha(0)
    }
    
    Block = block("make_blocks")
    if (Block:blockNotDone()){
        Vars = Block:blockValues()
        if (Block:blockFirst()){
            Vars["i", number] = 1
        }
        LastI = Vars["i", number]
        
        for (I = LastI, 13){
            if (!propCanCreate() | Block:blockPerfBreak()){
                Vars["i", number] = I
                Block:blockDone(0)
                exit()
            }
            
            createBlock(TargetPos + vec(30, 30, 70) + randvec(vec(0,0,0), vec(50,50,0)), letterN(2*(I - 1) + 1), letterN(2*(I - 1) + 2), (I % 10))
        }
    }
}

